function FHN = make_ODE_FHN()
%% make_ODE_FHN Replaces usual make process for FHN
% Place in CollocInfer/FHN folder and try out with FhNEx.m
% by changing make_FHN to make_ODE_FHN

% Create symbolic variables, size appropiately, 
syms t;
p = sym('p%d_%d',[1,3]);
x = sym('x%d_%d',[1,2]);

% Create a function that describes the ODE using symbolic variables like 
% FhN below.

f = [p(1)*( B*x(1)*(p(2) + x(3)) ) + p(1) - p(3)*x(1);
     B*x(1)*(p(2) + x(3)) - p(4)*x(2) - p(3)*x(2)];

% Create an instance of ODE  
odeproblem = ODE(f,t,x,p);

% Set the ode to use exp(p) in functions; 
% odeproblem.SetExponentialParameter();

% Compute the derivatives needed for collocinfer
odeproblem.computeDerivatives();

% Get function handles for ODE, what collocinfer is expecting
SEIR = odeproblem.make();

odeproblem.plot([0,10],[1,1,1],[1,1,1,1,1,1,1,1],0);
end