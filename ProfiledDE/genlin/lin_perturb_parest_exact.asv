%% Simulation of Parameter Estimation for Perturbed Linear Systems

odefn    = @genlinfunode;    % Function for ODE solver (exact)

fn.fn       = @genlinfun;       % RHS function

fn.dfdx     = @genlindfdx;      % Derivative wrt inputs (Jacobian)
fn.dfdp     = @genlindfdp;      % Derviative wrt parameters

fn.d2fdx2   = @genlind2fdx2;    % Hessian wrt inputs
fn.d2fdxdp  = @genlind2fdxdp;   % Hessian wrt inputs and parameters
fn.d2fdp2   = @genlind2fdp2;    % Hessian wrt parameters.    

fn.d3fdx3   = @genlind3fdx3;    % Third derivative wrt inputs.
fn.d3fdx2dp = @genlind3fdx2dp;  % Third derivative wrt intputs, inputs and pars.
fn.d3fdxdp2 = @genlind3fdxdp2;  % Third derivative wrt inputs, pars and pars. 
                                % dimensions = time, component, input,
                                % parameters
                                                   
%% Various Parameters

more = [];

y0 = [-1,1];                      
pars = [-1; 2; -1; 1]; 

sigma = 0.5;                    

jitter = 0.2;                   
nrep = 50;

%% Observation times

tspan = 0:0.05:20;    


%% Fitting parameters


lambdas = 10.^(-2:4);     
lambda0 = 1;        


nknots = 401;
norder = 3;
nquad = 5;     

%% Profiling optimisation control

lsopts_out = optimset('DerivativeCheck','on','Jacobian','on',...
    'Display','iter','MaxIter',1000,'TolFun',1e-8,'TolX',1e-10);


%% Setting up Functional Data Objects

range = [min(tspan),max(tspan)];

knots_cell = cell(1,length(y0));
knots_cell(:) = {linspace(range(1),range(2),401)};

basis_cell = cell(1,length(y0)); 
Lfd_cell = cell(1,length(y0));

nbasis = zeros(length(y0),1);

bigknots = knots_cell{1};               
nbasis(1) = length(knots_cell{1}) + norder - 2;          

for(i = 2:length(y0))
    bigknots = [bigknots knots_cell{i}];
    nbasis(i) = length(knots_cell{i}) + norder -2;
end

quadvals = MakeQuadPoints(bigknots,nquad);   

for(i = 1:length(y0))
    basis_cell{i} = MakeBasis(range,nbasis(i),norder,...  
        knots_cell{i},quadvals,1);                        
    Lfd_cell{i} = fdPar(basis_cell{i},1,lambda0);         
end

%% Calculate paths

pcoef = zeros(nbasis(1),1);
pcoef(floor(nbasis(1)/2):(ceil(nbasis(1)/2)+5)) = 10;
fd_obj = fd(pcoef,basis_cell{1});
more.force = {fd_obj};
more.force_mat = [1; 0];

odeopts = odeset('RelTol',1e-13);
[full_time,full_path] = ode45(odefn,tspan,y0,odeopts,[pars; 1; 0],more);


% Start the simulations

parest = zeros([nrep 2+length(pars)]);
errs = zeros([nrep 2]);


for(g = 1:nrep)

    noise_path = full_path + sigma*randn(size(full_path));

    ppars = pars + jitter*randn(length(pars),1);
    disp(ppars')

    newpars = lsqnonlin(@ExactParsInitErr,[y0 pars'],[],[],lsopts_out,...
        @linfun0,@lindfdp,@lindfdy,full_time,full_path);
    
    disp(newpars');

    parest(g,h,:) = newpars;

    [new_time,new_path] = ode45(@linfu

    end

end

save 'genlin_perturb_parest_exact.mat' parest errs
